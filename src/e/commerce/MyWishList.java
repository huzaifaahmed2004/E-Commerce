/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package e.commerce;

import java.sql.Connection;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;
/**
 *
 * @author huzai
 */
public class MyWishList extends javax.swing.JPanel {
Connection connection = DatabaseConnectivity.getConnection();
private String userID;
/**
     * Creates new form MyWishList
     */
    public MyWishList(String UID) {
        initComponents();
        userID=UID;
        load();
           EditTable(jTable1);
    }
private void load(){
     DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // Clear existing data
    
    // Define the SQL query
 String query = "SELECT r.id AS WishlistID, p.Name AS ProductName, p.Price,p.Stock " +
               "FROM wishlist r " +
               "INNER JOIN Product p ON r.product_id = p.ProductID " +
               "WHERE r.user_id = ?";

    
    try (PreparedStatement statement = connection.prepareStatement(query)) {
        statement.setString(1, userID);
        ResultSet resultSet = statement.executeQuery();
        
        // Iterate through the result set and add data to the table model
        while (resultSet.next()) {
            int productID = resultSet.getInt("WishlistID");
            String productName = resultSet.getString("ProductName");
            double price = resultSet.getDouble("Price");
            int Stock=resultSet.getInt("Stock");
            // Add a row to the table model
            model.addRow(new Object[]{productID, productName, price,Stock});
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}
public static void EditTable(JTable table) {
        // Center the data in each column
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        
          DefaultTableCellRenderer headerRenderer = (DefaultTableCellRenderer) table.getTableHeader().getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
       // Get the column model and set the renderer and width for each column
        TableColumnModel columnModel = table.getColumnModel();
        
        // Set column sizes and renderer for column 1
        columnModel.getColumn(0).setCellRenderer(centerRenderer);

        // Set column sizes and renderer for column 2
        columnModel.getColumn(1).setCellRenderer(centerRenderer);

        // Set column sizes and renderer for column 3
        columnModel.getColumn(2).setCellRenderer(centerRenderer);
        columnModel.getColumn(3).setCellRenderer(centerRenderer);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(102, 102, 102));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Wishlist ID", "Product Name", "Product Price", "Stock Availible"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(30);
        jTable1.setShowGrid(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("My WishList");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Click on the product for more options");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed

    }//GEN-LAST:event_jTable1KeyPressed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
  handleWishlistActions() ;

    }//GEN-LAST:event_jTable1MouseClicked
private void handleWishlistActions() {
    int r = jTable1.getSelectedRow();

    if (r == -1) {
        JOptionPane.showMessageDialog(null, "Please select a product.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int stock = Integer.parseInt(jTable1.getValueAt(r, 3).toString()); // Assuming stock is in column 3
    int wishlistID = Integer.parseInt(jTable1.getValueAt(r, 0).toString());
    String productID = jTable1.getValueAt(r, 0).toString(); // Assuming product ID is in column 0

    Object[] options = {"Remove from Wishlist", "Add to Cart"};
    int choice = JOptionPane.showOptionDialog(null,
            "Choose an action:",
            "Wishlist Action",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]);

    if (choice == JOptionPane.YES_OPTION) {
        // Remove from wishlist
        removeFromWishlist(wishlistID);
    } else if (choice == JOptionPane.NO_OPTION) {
        addToCartFromWishlist(wishlistID, productID, stock);
    }
}
private void removeFromWishlist(int wishlistID) {
    String query = "DELETE FROM Wishlist WHERE id = ? AND user_id = ?";

    try (PreparedStatement statement = connection.prepareStatement(query)) {
        // Set the parameters for the prepared statement
        statement.setInt(1, wishlistID);
        statement.setString(2, userID);

        // Execute the delete statement
        int rowsDeleted = statement.executeUpdate();

        if (rowsDeleted > 0) {
            // Deleted successfully
            JOptionPane.showMessageDialog(null, "Product Removed from Wishlist");
            load(); // Assuming load() reloads the wishlist data
        } else {
            // No records deleted (record might not exist)
            JOptionPane.showMessageDialog(null, "Record not found or failed to delete.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}
private void addToCartFromWishlist(int wishlistID, String productID, int stock) {
    if (stock <= 0) {
        JOptionPane.showMessageDialog(null, "Stock is not available for this product.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String quantityStr = JOptionPane.showInputDialog("Enter quantity (max " + stock + "):");
    if (quantityStr != null) {
        try {
            int quantity = Integer.parseInt(quantityStr);
            if (quantity > 0 && quantity <= stock) {
                addItemToCart(userID, productID, quantity);
                removeFromWishlist(wishlistID);
            } else {
                JOptionPane.showMessageDialog(null, "Invalid quantity entered.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid number format.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}

public void addItemToCart(String userID, String productID,int quantity) {
    // Check if the product ID and user ID are valid
    if (productID == null || productID.isEmpty() || userID == null || userID.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Invalid user or product ID.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }



    // Check if a cart exists for the user
    int cartID =  getCartIDForUser();
    if (cartID == -1) {
        // Create a new cart for the user
        cartID =  createCartForUser();
    }

    try {
        // Check if the product is already in the cart
        String checkCartQuery = "SELECT Quantity FROM CartItems WHERE CartID = ? AND ProductID = ?";
        PreparedStatement checkCartStatement = connection.prepareStatement(checkCartQuery);
        checkCartStatement.setInt(1, cartID);
        checkCartStatement.setString(2, productID);
        ResultSet resultSet = checkCartStatement.executeQuery();

        if (resultSet.next()) {
            int existingQuantity = resultSet.getInt("Quantity");
            int newQuantity = existingQuantity + quantity;

            // Update the quantity in the cart
            String updateCartQuery = "UPDATE CartItems SET Quantity = ? WHERE CartID = ? AND ProductID = ?";
            PreparedStatement updateCartStatement = connection.prepareStatement(updateCartQuery);
            updateCartStatement.setInt(1, newQuantity);
            updateCartStatement.setInt(2, cartID);
            updateCartStatement.setString(3, productID);
            updateCartStatement.executeUpdate();
            JOptionPane.showMessageDialog(null, "Item quantity updated in cart successfully.");
        } else {
            // Add item to the cartItems table
            String insertCartQuery = "INSERT INTO CartItems (CartID, ProductID, Quantity) VALUES (?, ?, ?)";
            PreparedStatement insertCartStatement = connection.prepareStatement(insertCartQuery);
            insertCartStatement.setInt(1, cartID);
            insertCartStatement.setString(2, productID);
            insertCartStatement.setInt(3, quantity);
            insertCartStatement.executeUpdate();
            JOptionPane.showMessageDialog(null, "Item added to cart successfully.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error updating cart: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
 private int getCartIDForUser() {
        int cartID = -1;
        String query = "SELECT CartID FROM Cart WHERE UserID = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, userID);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                cartID = resultSet.getInt("CartID");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return cartID;
    }

    private int createCartForUser() {
        int cartID = -1;
        String query = "INSERT INTO Cart (UserID) VALUES (?)";
        try (PreparedStatement statement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
            statement.setString(1, userID);
            statement.executeUpdate();
            ResultSet generatedKeys = statement.getGeneratedKeys();
            if (generatedKeys.next()) {
                cartID = generatedKeys.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return cartID;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
